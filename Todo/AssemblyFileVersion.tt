<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ import namespace="System.IO" #>
<#@ output extension=".cs" #>

<#
	int major = 0;
	int minor = 0;
	int build = 0;
	int revision = 0;
	string suffix = "";

	try
	{
		using(var f = File.OpenText(Host.ResolvePath("Version.txt")))
		{
			string date = f.ReadLine();
			DateTime startDate = DateTime.Parse(date);

			string version = f.ReadLine();
			string maj = version.Split('.')[0];
			string min = version.Split('.')[1];
			
			major = int.Parse(maj); 
			minor = int.Parse(min); 
			build =  DateTime.Today.Subtract(startDate).Days;
			
			float factor = (float)(UInt16.MaxValue - 1) / (24 * 60 * 60);
			
			revision = (int)(DateTime.Now.TimeOfDay.TotalSeconds * factor);
		}

		using(var f = File.OpenText(Host.ResolvePath("VersionSuffix.txt")))
		{
			suffix = f.ReadLine().Trim();
		}

		if(!string.IsNullOrEmpty(suffix))
			suffix = "-" + suffix;
	}
	catch
	{
		major = 1;
		minor = 0;
		build = 0;
		revision = 0;
	}
#>
//<#= major #>
//<#= minor #>
//<#= build #>
//<#= revision #>
//<#= suffix #> 
// This code was generated by a tool. Any changes made manually will be lost
// the next time this code is regenerated.
// 
  
using System.Reflection;

[assembly: AssemblyVersion("<#= major #>.<#= minor #>.<#= build #>")]
[assembly: AssemblyFileVersion("<#= major #>.<#= minor #>.<#= build #>.<#= revision #>")]
[assembly: AssemblyInformationalVersion("<#= major #>.<#= minor #>.<#= build #><#= suffix #>")]